@{
    ViewData["Title"] = "Insecure Deserialization Demo";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/css/app.css" />
</head>
<body>

    <h1 style="text-align: center; margin-bottom: 40px;">üß™ Insecure Deserialization Demo</h1>

    <div class="container">
        <!-- Vulnerable Functionality -->
        <div class="box">
            <h2>Can you convince AspGoat to open Calculator for you ü§î?</h2>
            <button class="btn btn-primary" onclick="sendNormalPayload()">
                Send
            </button>
        </div>

        <!-- Secure Coding Challenge -->
        <div class="box">
            <h2>üîê Secure the Code</h2>
            <p>This page is vulnerable to <strong>Remote Code Execution via Insecure Deserialization.</strong></p>
            <p>Your task is to find the line that causes this and fix it.</p>
            <button class="btn btn-outline-dark mt-2" onclick="openCodePopup()">üïµÔ∏è Identify Vulnerability</button>
        </div>
    </div>

    <div style="text-align: center; margin-top: 25px">
        <h3 id="msg"></h3>
    </div>

    <div style="text-align: center; margin-top: 25px">
        <h6><strong>Note: </strong>Using '<strong>calc.exe</strong>' you can open the calculator app only in Windows based systems. In case of Linux or MacOS, the command will be different. For Docker, there might not be a calculator app pre-installed. If you can gain Remote Code Execution on any system, consider this challenge solved üëç.</h6>
    </div>

    <!-- First Modal -->
    <div id="codeModal" class="modal">
        <div class="modal-content">
            <h3>üîç Analyze the Code</h3>

            <div class="popup-line"><input type="checkbox" class="code-checkbox" onchange="checkVulnerability(this, 1)">
            <span>var json = body.GetRawText();</span>
            </div>

            <div class="popup-line"><input type="checkbox" class="code-checkbox" onchange="checkVulnerability(this, 2)">
            <span>var settings = new JsonSerializerSettings {</span>
            </div>

            <div class="popup-line"><input type="checkbox" class="code-checkbox" onchange="checkVulnerability(this, 3)">
            <span>&nbsp;&nbsp;TypeNameHandling = TypeNameHandling.All</span>
            </div>

            <div class="popup-line"><input type="checkbox" class="code-checkbox" onchange="checkVulnerability(this, 4)">
            <span>};</span>
            </div>

            <div class="popup-line"><input type="checkbox" class="code-checkbox" onchange="checkVulnerability(this, 5)">
            <span>var obj = JsonConvert.DeserializeObject&lt;SafeMessage&gt;(json, settings);</span>
            </div>

            <div class="popup-line"><input type="checkbox" class="code-checkbox" onchange="checkVulnerability(this, 6)">
            <span>var message = obj?.Message;</span>
            </div>

            <div class="popup-line"><input type="checkbox" class="code-checkbox" onchange="checkVulnerability(this, 7)">
            <span>return Json(new { message });</span>
            </div>

            <br />
            <button onclick="closeCodePopup()">Close</button>
        </div>
    </div>

    <!-- Second Modal -->
    <div id="diffModal" class="diff-modal">
        <div class="diff-content">
            <h3>‚úÖ Secure Version</h3>

            <div class="diff-line removed">- var settings = new JsonSerializerSettings {</div>
            <div class="diff-line removed">- &nbsp;&nbsp;TypeNameHandling = TypeNameHandling.All</div>
            <div class="diff-line removed">- };</div>

            <div class="diff-line added">+ var settings = new JsonSerializerSettings {</div>
            <div class="diff-line added">+ &nbsp;&nbsp;TypeNameHandling = TypeNameHandling.None, // Do not honor $type</div>
            <div class="diff-line added">+ &nbsp;&nbsp;MetadataPropertyHandling = MetadataPropertyHandling.Ignore // Ignore metadata like $type/$id</div>
            <div class="diff-line added">+ };</div>
            <div class="diff-line added">+ var obj = JsonConvert.DeserializeObject&lt;SafeMessage&gt;(json, settings);</div>

            <br />
            <button onclick="closeDiffPopup()">Close</button>
    </div>
    </div>

    <h6 style="margin: 25px;">More Information:</h6>
    <ul>
        <li>
            <a href="https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2326">Microsoft - Newtonsoft.Json.TypeNameHandling</a>
        </li>
        <li>
            <a href="https://portswigger.net/web-security/deserialization">Portswigger - Insecure Deserialization</a>
        </li>
        <li>
            <a href="https://owasp.org/www-community/vulnerabilities/Insecure_Deserialization">OWASP - Insecure Deserialization</a>
        </li>
    </ul>

    <script>
        function sendNormalPayload() {
        const payload = JSON.stringify({ "Message": "Hello from AspGoat!" });

        fetch("/Home/InsecureDeserialization", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: payload
        })
        .then(r => r.json())
        .then(d => {
            document.getElementById("msg").textContent = d.message ?? "(null)";
        })
        .catch(err => console.error(err));
        }
    </script>

    <script src="~/js/indes.js"></script>
</body>
</html>
